{"data": {"title": "Software_testing", "paragraphs": [{"qas": [{"question": "What is the purpose of testing software?", "id": "57290d3a6aef0514001549f6", "answers": [{"text": "finding software bugs", "answer_start": 331}], "is_impossible": false}, {"question": "Why is it so difficult to locate bugs in software?", "id": "57290d3a6aef0514001549f7", "answers": [{"text": "tests for even simple software components is practically infinite", "answer_start": 26}], "is_impossible": false}, {"question": "What can come from one bug being fixed?", "id": "57290d3a6aef0514001549f8", "answers": [{"text": "it can illuminate other, deeper bugs,", "answer_start": 449}], "is_impossible": false}, {"plausible_answers": [{"text": "practically infinite", "answer_start": 71}], "question": "What is the number of tests for complex software components?", "id": "5a7b686e21c2de001afe9fdc", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "to select tests that are feasible for the available time and resources.", "answer_start": 133}], "question": "Firmware testing uses strategy to accomplish what?", "id": "5a7b686e21c2de001afe9fdd", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "finding software bugs (errors or other defects)", "answer_start": 331}], "question": "software testing attempts to eliminate a program for what reason?", "id": "5a7b686e21c2de001afe9fde", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "iterative", "answer_start": 405}], "question": "The job of testing is called what type of progress?", "id": "5a7b686e21c2de001afe9fdf", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "it can illuminate other, deeper bugs, or can even create new ones.", "answer_start": 449}], "question": "What are some complications of not fixing bugs?", "id": "5a7b686e21c2de001afe9fe0", "answers": [], "is_impossible": true}], "context": "As the number of possible tests for even simple software components is practically infinite, all software testing uses some strategy to select tests that are feasible for the available time and resources. As a result, software testing typically (but not exclusively) attempts to execute a program or application with the intent of finding software bugs (errors or other defects). The job of testing is an iterative process as when one bug is fixed, it can illuminate other, deeper bugs, or can even create new ones.", "allenNER": {"words": "As the number of possible tests for even simple software components is practically infinite , all software testing uses some strategy to select tests that are feasible for the available time and resources . As a result , software testing typically ( but not exclusively ) attempts to execute a program or application with the intent of finding software bugs ( errors or other defects ) . The job of testing is an iterative process as when one bug is fixed , it can illuminate other , deeper bugs , or can even create new ones .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What can testing not completely find?", "id": "57290ea56aef0514001549fc", "answers": [{"text": "all the defects", "answer_start": 177}], "is_impossible": false}, {"question": "While looking for bugs, what else can testing do?", "id": "57290ea56aef0514001549fd", "answers": [{"text": "furnishes a criticism or comparison", "answer_start": 222}], "is_impossible": false}, {"question": "What does the software compare during testing against?", "id": "57290ea56aef0514001549fe", "answers": [{"text": "oracles\u2014principles or mechanisms", "answer_start": 318}], "is_impossible": false}, {"question": "What make up the oracle during testing?", "id": "57290ea56aef0514001549ff", "answers": [{"text": "specifications, contracts, comparable products, past versions", "answer_start": 446}], "is_impossible": false}, {"plausible_answers": [{"text": "software", "answer_start": 200}], "question": "Testing can identify all the defects within what?", "id": "5a7b6ee021c2de001afea00e", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "furnishes a criticism or comparison", "answer_start": 222}], "question": "While looking for bug, what can testing not do?", "id": "5a7b6ee021c2de001afea00f", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "specifications, contracts, comparable products, past versions of the same product, inferences about intended or expected purpose", "answer_start": 446}], "question": "What are some things oracles include and are limited to?", "id": "5a7b6ee021c2de001afea010", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "oracles\u2014principles or mechanisms", "answer_start": 318}], "question": "What does the software contrast during testing against?", "id": "5a7b6ee021c2de001afea011", "answers": [], "is_impossible": true}], "context": "Although testing can determine the correctness of software under the assumption of some specific hypotheses (see hierarchy of testing difficulty below), testing cannot identify all the defects within software. Instead, it furnishes a criticism or comparison that compares the state and behavior of the product against oracles\u2014principles or mechanisms by which someone might recognize a problem. These oracles may include (but are not limited to) specifications, contracts, comparable products, past versions of the same product, inferences about intended or expected purpose, user or customer expectations, relevant standards, applicable laws, or other criteria.", "allenNER": {"words": "Although testing can determine the correctness of software under the assumption of some specific hypotheses ( see hierarchy of testing difficulty below ) , testing can not identify all the defects within software . Instead , it furnishes a criticism or comparison that compares the state and behavior of the product against oracles \u2014 principles or mechanisms by which someone might recognize a problem . These oracles may include ( but are not limited to ) specifications , contracts , comparable products , past versions of the same product , inferences about intended or expected purpose , user or customer expectations , relevant standards , applicable laws , or other criteria .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What is the primamry reason for testing software?", "id": "572910176aef051400154a0e", "answers": [{"text": "to detect software failures", "answer_start": 32}], "is_impossible": false}, {"question": "What can testing software not fully completely establish?", "id": "572910176aef051400154a0f", "answers": [{"text": "cannot establish that a product functions properly under all conditions", "answer_start": 117}], "is_impossible": false}, {"question": "What does the scope of testing the software also look at?", "id": "572910176aef051400154a10", "answers": [{"text": "examination of code as well as execution of that code", "answer_start": 319}], "is_impossible": false}, {"question": "Which two teams would you normally separate when writing and testing software?", "id": "572910176aef051400154a11", "answers": [{"text": "testing organization may be separate from the development team", "answer_start": 569}], "is_impossible": false}, {"plausible_answers": [{"text": "to detect software failures so that defects may be discovered and corrected.", "answer_start": 32}], "question": "What is a secondary purpose of testing software?", "id": "5a7b724b21c2de001afea016", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "examination of code as well as execution of that code in various environments and conditions as well as examining the aspects of code", "answer_start": 319}], "question": "What does software testing always include?", "id": "5a7b724b21c2de001afea017", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "a testing organization may be separate from the development team", "answer_start": 567}], "question": "In the previous culture of software development, what two things were separate?", "id": "5a7b724b21c2de001afea018", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "the process by which software is developed.", "answer_start": 748}], "question": "Data from software testing may be used to model what?", "id": "5a7b724b21c2de001afea019", "answers": [], "is_impossible": true}], "context": "A primary purpose of testing is to detect software failures so that defects may be discovered and corrected. Testing cannot establish that a product functions properly under all conditions but can only establish that it does not function properly under specific conditions. The scope of software testing often includes examination of code as well as execution of that code in various environments and conditions as well as examining the aspects of code: does it do what it is supposed to do and do what it needs to do. In the current culture of software development, a testing organization may be separate from the development team. There are various roles for testing team members. Information derived from software testing may be used to correct the process by which software is developed.", "allenNER": {"words": "A primary purpose of testing is to detect software failures so that defects may be discovered and corrected . Testing can not establish that a product functions properly under all conditions but can only establish that it does not function properly under specific conditions . The scope of software testing often includes examination of code as well as execution of that code in various environments and conditions as well as examining the aspects of code : does it do what it is supposed to do and do what it needs to do . In the current culture of software development , a testing organization may be separate from the development team . There are various roles for testing team members . Information derived from software testing may be used to correct the process by which software is developed .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What is the first step that leads to a software failure?", "id": "572911636aef051400154a20", "answers": [{"text": "programmer makes an error", "answer_start": 57}], "is_impossible": false}, {"question": "What is the result of the programmer making a mistake?", "id": "572911636aef051400154a21", "answers": [{"text": "defect (fault, bug)", "answer_start": 113}], "is_impossible": false}, {"question": "When can software defects in dead code cause problems?", "id": "572911636aef051400154a22", "answers": [{"text": "run on a new computer hardware platform", "answer_start": 522}], "is_impossible": false}, {"plausible_answers": [{"text": "A programmer makes an error (mistake), which results in a defect (fault, bug) in the software source code.", "answer_start": 55}], "question": "Software programs evolve through what process?", "id": "5a7b745721c2de001afea026", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "failures", "answer_start": 313}], "question": "All defects result in what?", "id": "5a7b745721c2de001afea027", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "result in failures", "answer_start": 368}], "question": "Defects in dead code always do what?", "id": "5a7b745721c2de001afea028", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "A defect", "answer_start": 388}], "question": "When the environment is changed, what does a failure always result from?", "id": "5a7b745721c2de001afea029", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "a wide range of failure symptoms", "answer_start": 661}], "question": "What can a single defect not result in?", "id": "5a7b745721c2de001afea02a", "answers": [], "is_impossible": true}], "context": "Software faults occur through the following processes. A programmer makes an error (mistake), which results in a defect (fault, bug) in the software source code. If this defect is executed, in certain situations the system will produce wrong results, causing a failure. Not all defects will necessarily result in failures. For example, defects in dead code will never result in failures. A defect can turn into a failure when the environment is changed. Examples of these changes in environment include the software being run on a new computer hardware platform, alterations in source data, or interacting with different software. A single defect may result in a wide range of failure symptoms.", "allenNER": {"words": "Software faults occur through the following processes . A programmer makes an error ( mistake ) , which results in a defect ( fault , bug ) in the software source code . If this defect is executed , in certain situations the system will produce wrong results , causing a failure . Not all defects will necessarily result in failures . For example , defects in dead code will never result in failures . A defect can turn into a failure when the environment is changed . Examples of these changes in environment include the software being run on a new computer hardware platform , alterations in source data , or interacting with different software . A single defect may result in a wide range of failure symptoms .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What is the primary issue with running software testing?", "id": "5729134aaf94a219006aa031", "answers": [{"text": "testing under all combinations of inputs and preconditions (initial state) is not feasible", "answer_start": 52}], "is_impossible": false}, {"question": "What types of software bugs are difficult to find during testing?", "id": "5729134aaf94a219006aa032", "answers": [{"text": "defects that occur infrequently", "answer_start": 260}], "is_impossible": false}, {"question": "What other non-functional dimensions can cause software to underperform and cause other problems?", "id": "5729134aaf94a219006aa033", "answers": [{"text": "usability, scalability, performance, compatibility, reliability", "answer_start": 443}], "is_impossible": false}, {"plausible_answers": [{"text": "testing under all combinations of inputs and preconditions (initial state) is not feasible", "answer_start": 52}], "question": "What is the secondary problem  with running software testing?", "id": "5a7b75f521c2de001afea03a", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "difficult", "answer_start": 296}], "question": "Defects that occur frequently are how easy to find?", "id": "5a7b75f521c2de001afea03b", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "usability, scalability, performance, compatibility, reliability", "answer_start": 443}], "question": "What are examples of functional dimensions of quality?", "id": "5a7b75f521c2de001afea03c", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "can be highly subjective", "answer_start": 507}], "question": "What is the issue with the functional dimensions of quality?", "id": "5a7b75f521c2de001afea03d", "answers": [], "is_impossible": true}], "context": "A fundamental problem with software testing is that testing under all combinations of inputs and preconditions (initial state) is not feasible, even with a simple product.:17-18 This means that the number of defects in a software product can be very large and defects that occur infrequently are difficult to find in testing. More significantly, non-functional dimensions of quality (how it is supposed to be versus what it is supposed to do)\u2014usability, scalability, performance, compatibility, reliability\u2014can be highly subjective; something that constitutes sufficient value to one person may be intolerable to another.", "allenNER": {"words": "A fundamental problem with software testing is that testing under all combinations of inputs and preconditions ( initial state ) is not feasible , even with a simple product.:17 - 18 This means that the number of defects in a software product can be very large and defects that occur infrequently are difficult to find in testing . More significantly , non - functional dimensions of quality ( how it is supposed to be versus what it is supposed to do)\u2014usability , scalability , performance , compatibility , reliability \u2014 can be highly subjective ; something that constitutes sufficient value to one person may be intolerable to another .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O U-MISC O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "Although software developers are unable to test everything, what do they run to keep the testing to a minimum? ", "id": "5729141f6aef051400154a3a", "answers": [{"text": "use combinatorial test design", "answer_start": 56}], "is_impossible": false}, {"question": "What does the use of combinatorial testing consist of?", "id": "5729141f6aef051400154a3b", "answers": [{"text": "get greater test coverage with fewer tests", "answer_start": 207}], "is_impossible": false}, {"question": "What two types of testing are involved with combinatorial testing as mentioned here?", "id": "5729141f6aef051400154a3c", "answers": [{"text": "speed or test depth", "answer_start": 280}], "is_impossible": false}, {"plausible_answers": [{"text": "combinatorial test", "answer_start": 60}], "question": "What test do firmware developers use to find out how to keep testing to a minimum?", "id": "5a7b7a0421c2de001afea052", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "greater test coverage", "answer_start": 211}], "question": "Combinatorial test design does not allow users to get what?", "id": "5a7b7a0421c2de001afea053", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "their test cases.", "answer_start": 383}], "question": "Unstructured variations can be built into what items?", "id": "5a7b7a0421c2de001afea054", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "requirements coverage", "answer_start": 481}], "question": "\"Coverage\" is referring to combined coverage but not what?", "id": "5a7b7a0421c2de001afea055", "answers": [], "is_impossible": true}], "context": "Software developers can't test everything, but they can use combinatorial test design to identify the minimum number of tests needed to get the coverage they want. Combinatorial test design enables users to get greater test coverage with fewer tests. Whether they are looking for speed or test depth, they can use combinatorial test design methods to build structured variation into their test cases. Note that \"coverage\", as used here, is referring to combinatorial coverage, not requirements coverage.", "allenNER": {"words": "Software developers ca n't test everything , but they can use combinatorial test design to identify the minimum number of tests needed to get the coverage they want . Combinatorial test design enables users to get greater test coverage with fewer tests . Whether they are looking for speed or test depth , they can use combinatorial test design methods to build structured variation into their test cases . Note that \" coverage \" , as used here , is referring to combinatorial coverage , not requirements coverage .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What determines the cost of fixing a bug?", "id": "572914a26aef051400154a40", "answers": [{"text": "the earlier a defect is found", "answer_start": 29}], "is_impossible": false}, {"question": "Ho many more times would the cost be if the problem is found after the software's release?", "id": "572914a26aef051400154a41", "answers": [{"text": "10\u2013100 times more", "answer_start": 275}], "is_impossible": false}, {"question": "What could possibly lessen the cost of fixing buggy software?", "id": "572914a26aef051400154a42", "answers": [{"text": "cloud-based services", "answer_start": 424}], "is_impossible": false}, {"plausible_answers": [{"text": "the earlier a defect is found, the cheaper it is to fix it.", "answer_start": 29}], "question": "What is the unpopular belief about the cost of fixing a bug?", "id": "5a7b7cb021c2de001afea06c", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "the stage it was found.", "answer_start": 158}], "question": "The cost of fixing a defect does not depend on what?", "id": "5a7b7cb021c2de001afea06d", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "10\u2013100 times", "answer_start": 275}], "question": "How much less would it cost to fix a problem found after the software's release?", "id": "5a7b7cb021c2de001afea06e", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "modern continuous deployment practices and cloud-based services", "answer_start": 381}], "question": "What modern items may increase the cost of re-deployment over time?", "id": "5a7b7cb021c2de001afea06f", "answers": [], "is_impossible": true}], "context": "It is commonly believed that the earlier a defect is found, the cheaper it is to fix it. The following table shows the cost of fixing the defect depending on the stage it was found. For example, if a problem in the requirements is found only post-release, then it would cost 10\u2013100 times more to fix than if it had already been found by the requirements review. With the advent of modern continuous deployment practices and cloud-based services, the cost of re-deployment and maintenance may lessen over time.", "allenNER": {"words": "It is commonly believed that the earlier a defect is found , the cheaper it is to fix it . The following table shows the cost of fixing the defect depending on the stage it was found . For example , if a problem in the requirements is found only post - release , then it would cost 10\u2013100 times more to fix than if it had already been found by the requirements review . With the advent of modern continuous deployment practices and cloud - based services , the cost of re - deployment and maintenance may lessen over time .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "Name three approaches software testers take when testing their software?", "id": "572915f36aef051400154a4e", "answers": [{"text": "Reviews, walkthroughs, or inspections", "answer_start": 57}], "is_impossible": false}, {"question": "What is the term that is used to described executing programmed code with a given set of test?", "id": "572915f36aef051400154a4f", "answers": [{"text": "dynamic testing", "answer_start": 222}], "is_impossible": false}, {"question": "When can dynamic testing occur?", "id": "572915f36aef051400154a50", "answers": [{"text": "before the program is 100% complete", "answer_start": 529}], "is_impossible": false}, {"question": "What are commonly used techniques during dynamic testing?", "id": "572915f36aef051400154a51", "answers": [{"text": "stubs/drivers or execution from a debugger environment", "answer_start": 705}], "is_impossible": false}, {"plausible_answers": [{"text": "software", "answer_start": 39}], "question": "There are few approached in what type of testing?", "id": "5a7b7eb421c2de001afea092", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "inspections", "answer_start": 83}], "question": "Examples of static testing include previews, walkthroughs, and what other item?", "id": "5a7b7eb421c2de001afea093", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "a given set of test cases", "answer_start": 178}], "question": "Dynamic testing refers to executing predetermined code with what?", "id": "5a7b7eb421c2de001afea094", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "when the program itself is run", "answer_start": 471}], "question": "When does dynamic testing not take place?", "id": "5a7b7eb421c2de001afea095", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "implicit", "answer_start": 263}], "question": "Static testing is always what?", "id": "5a7b7eb421c2de001afea096", "answers": [], "is_impossible": true}], "context": "There are many approaches available in software testing. Reviews, walkthroughs, or inspections are referred to as static testing, whereas actually executing programmed code with a given set of test cases is referred to as dynamic testing. Static testing is often implicit, as proofreading, plus when programming tools/text editors check source code structure or compilers (pre-compilers) check syntax and data flow as static program analysis. Dynamic testing takes place when the program itself is run. Dynamic testing may begin before the program is 100% complete in order to test particular sections of code and are applied to discrete functions or modules. Typical techniques for this are either using stubs/drivers or execution from a debugger environment.", "allenNER": {"words": "There are many approaches available in software testing . Reviews , walkthroughs , or inspections are referred to as static testing , whereas actually executing programmed code with a given set of test cases is referred to as dynamic testing . Static testing is often implicit , as proofreading , plus when programming tools / text editors check source code structure or compilers ( pre - compilers ) check syntax and data flow as static program analysis . Dynamic testing takes place when the program itself is run . Dynamic testing may begin before the program is 100 % complete in order to test particular sections of code and are applied to discrete functions or modules . Typical techniques for this are either using stubs / drivers or execution from a debugger environment .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What is another term used for White-box testing?", "id": "5729193baf94a219006aa06f", "answers": [{"text": "clear box testing", "answer_start": 33}], "is_impossible": false}, {"question": "What is involved with White-box testing?", "id": "5729193baf94a219006aa070", "answers": [{"text": "by seeing the source code", "answer_start": 119}], "is_impossible": false}, {"question": "Which two procedures are used to design test cases in White-box testing?", "id": "5729193baf94a219006aa071", "answers": [{"text": "testing an internal perspective of the system, as well as programming skills", "answer_start": 268}], "is_impossible": false}, {"plausible_answers": [{"text": "clear box testing, glass box testing, transparent box testing and structural testing", "answer_start": 33}], "question": "White-box data testing is also known by what other names?", "id": "5a7b813621c2de001afea0b8", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "programming skills", "answer_start": 326}], "question": "An external perspective is used in white-box testing as well as what else is used to develop test cases?", "id": "5a7b813621c2de001afea0b9", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "to exercise paths through the code and determine the appropriate outputs.", "answer_start": 403}], "question": "The tester chooses outputs to accomplish what?", "id": "5a7b813621c2de001afea0ba", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "ICT", "answer_start": 551}], "question": "What is in-circulus testing also known as?", "id": "5a7b813621c2de001afea0bb", "answers": [], "is_impossible": true}], "context": "White-box testing (also known as clear box testing, glass box testing, transparent box testing and structural testing, by seeing the source code) tests internal structures or workings of a program, as opposed to the functionality exposed to the end-user. In white-box testing an internal perspective of the system, as well as programming skills, are used to design test cases. The tester chooses inputs to exercise paths through the code and determine the appropriate outputs. This is analogous to testing nodes in a circuit, e.g. in-circuit testing (ICT).", "allenNER": {"words": "White - box testing ( also known as clear box testing , glass box testing , transparent box testing and structural testing , by seeing the source code ) tests internal structures or workings of a program , as opposed to the functionality exposed to the end - user . In white - box testing an internal perspective of the system , as well as programming skills , are used to design test cases . The tester chooses inputs to exercise paths through the code and determine the appropriate outputs . This is analogous to testing nodes in a circuit , e.g. in - circuit testing ( ICT ) .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What is the main difference between black-box testing and white-box testing?", "id": "57291acd3f37b3190047801d", "answers": [{"text": "seeing the source code", "answer_start": 138}], "is_impossible": false}, {"question": "What are the software testers aware of?", "id": "57291acd3f37b3190047801e", "answers": [{"text": "aware of what the software is supposed to do", "answer_start": 183}], "is_impossible": false}, {"question": "What are the first three methods mentioned that make up black-box testing??", "id": "57291acd3f37b3190047801f", "answers": [{"text": "equivalence partitioning, boundary value analysis", "answer_start": 284}], "is_impossible": false}, {"plausible_answers": [{"text": "a \"black box\",", "answer_start": 41}], "question": "Black-box testing treats data as what?", "id": "5a7b825121c2de001afea0d2", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "what the software is supposed to do, not how it does it.", "answer_start": 192}], "question": "Testers are always aware of what?", "id": "5a7b825121c2de001afea0d3", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "equivalence partitioning, boundary value analysis, all-pairs testing", "answer_start": 284}], "question": "What are the first three methods of white-box testing?", "id": "5a7b825121c2de001afea0d4", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "source", "answer_start": 149}], "question": "Black-box testing works with seeing what type of code?", "id": "5a7b825121c2de001afea0d5", "answers": [], "is_impossible": true}], "context": "Black-box testing treats the software as a \"black box\", examining functionality without any knowledge of internal implementation, without seeing the source code. The testers are only aware of what the software is supposed to do, not how it does it. Black-box testing methods include: equivalence partitioning, boundary value analysis, all-pairs testing, state transition tables, decision table testing, fuzz testing, model-based testing, use case testing, exploratory testing and specification-based testing.", "allenNER": {"words": "Black - box testing treats the software as a \" black box \" , examining functionality without any knowledge of internal implementation , without seeing the source code . The testers are only aware of what the software is supposed to do , not how it does it . Black - box testing methods include : equivalence partitioning , boundary value analysis , all - pairs testing , state transition tables , decision table testing , fuzz testing , model - based testing , use case testing , exploratory testing and specification - based testing .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What term is used to test functionality of the software accordingly with the application requirements?", "id": "57291e76af94a219006aa0a1", "answers": [{"text": "Specification-based testing", "answer_start": 0}], "is_impossible": false}, {"question": "What are the test cases built around?", "id": "57291e76af94a219006aa0a2", "answers": [{"text": "specifications and requirements", "answer_start": 396}], "is_impossible": false}, {"question": "When building test cases which of the two methods used is more common over the other?", "id": "57291e76af94a219006aa0a3", "answers": [{"text": "functional", "answer_start": 660}], "is_impossible": false}, {"plausible_answers": [{"text": "the functionality of software according to the applicable requirements.", "answer_start": 41}], "question": "What does specialization-based testing aim to test?", "id": "5a7b849921c2de001afea0ee", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "requirements", "answer_start": 415}], "question": "Test cases are built around specializations and what else?", "id": "5a7b849921c2de001afea0ef", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "functional", "answer_start": 660}], "question": "Out of the two methods of building test cases, non-functional and unfunctional, which is more common?", "id": "5a7b849921c2de001afea0f0", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "specifications, requirements, and designs", "answer_start": 532}], "question": "What descriptions of the firmware are used in test cases?", "id": "5a7b849921c2de001afea0f1", "answers": [], "is_impossible": true}], "context": "Specification-based testing aims to test the functionality of software according to the applicable requirements. This level of testing usually requires thorough test cases to be provided to the tester, who then can simply verify that for a given input, the output value (or behavior), either \"is\" or \"is not\" the same as the expected value specified in the test case. Test cases are built around specifications and requirements, i.e., what the application is supposed to do. It uses external descriptions of the software, including specifications, requirements, and designs to derive test cases. These tests can be functional or non-functional, though usually functional.", "allenNER": {"words": "Specification - based testing aims to test the functionality of software according to the applicable requirements . This level of testing usually requires thorough test cases to be provided to the tester , who then can simply verify that for a given input , the output value ( or behavior ) , either \" is \" or \" is not \" the same as the expected value specified in the test case . Test cases are built around specifications and requirements , i.e. , what the application is supposed to do . It uses external descriptions of the software , including specifications , requirements , and designs to derive test cases . These tests can be functional or non - functional , though usually functional .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What is one huge advantage to using the black-box method?", "id": "572921606aef051400154a72", "answers": [{"text": "no programming knowledge is required", "answer_start": 49}], "is_impossible": false}, {"question": "What can black-box testing sometimes be referred to with the in-ability to see the code?", "id": "572921606aef051400154a73", "answers": [{"text": "like a walk in a dark labyrinth without a flashlight.", "answer_start": 281}], "is_impossible": false}, {"question": "What is a good reason to have testers and developers separate?", "id": "572921606aef051400154a74", "answers": [{"text": "tester likely has a different set and may emphasize different areas of functionality", "answer_start": 137}], "is_impossible": false}, {"plausible_answers": [{"text": "programming", "answer_start": 52}], "question": "What knowledge is required for the black box technique?", "id": "5a7b885321c2de001afea108", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "\"like a walk in a dark labyrinth without a flashlight.\"", "answer_start": 280}], "question": "Black-box coding has been compared to what?", "id": "5a7b885321c2de001afea109", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "source", "answer_start": 368}], "question": "Some parts of the program can remain untested because the what law is not examined?", "id": "5a7b885321c2de001afea10a", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "tester likely has a different set and may emphasize different areas of functionality", "answer_start": 137}], "question": "Testers and developers are kept together for what reason?", "id": "5a7b885321c2de001afea10b", "answers": [], "is_impossible": true}], "context": "One advantage of the black box technique is that no programming knowledge is required. Whatever biases the programmers may have had, the tester likely has a different set and may emphasize different areas of functionality. On the other hand, black-box testing has been said to be \"like a walk in a dark labyrinth without a flashlight.\" Because they do not examine the source code, there are situations when a tester writes many test cases to check something that could have been tested by only one test case, or leaves some parts of the program untested.", "allenNER": {"words": "One advantage of the black box technique is that no programming knowledge is required . Whatever biases the programmers may have had , the tester likely has a different set and may emphasize different areas of functionality . On the other hand , black - box testing has been said to be \" like a walk in a dark labyrinth without a flashlight . \" Because they do not examine the source code , there are situations when a tester writes many test cases to check something that could have been tested by only one test case , or leaves some parts of the program untested .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What does grey-box testing involve?", "id": "5729223faf94a219006aa0d7", "answers": [{"text": "having knowledge of internal data structures and algorithms", "answer_start": 64}], "is_impossible": false}, {"question": "What does a grey-box tester not need to run their test?", "id": "5729223faf94a219006aa0d8", "answers": [{"text": "not required to have full access to the software's source code", "answer_start": 232}], "is_impossible": false}, {"question": "What does not qualify as grey-box testing?", "id": "5729223faf94a219006aa0d9", "answers": [{"text": "Manipulating input data and formatting output", "answer_start": 319}], "is_impossible": false}, {"plausible_answers": [{"text": "algorithms for purposes of designing tests,", "answer_start": 113}], "question": "Grey-box testing involves having knowledge of external data structures and what else?", "id": "5a7b898021c2de001afea11a", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "the software's source code", "answer_start": 268}], "question": "The tester is required to have full access to what piece of information?", "id": "5a7b898021c2de001afea11b", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "grey-box", "answer_start": 383}], "question": "Manipulating data and formatting input do not qualify as what?", "id": "5a7b898021c2de001afea11c", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "when conducting integration testing between two modules of code written by two different developers, where only the interfaces are exposed for test.", "answer_start": 547}], "question": "When is the distinction between black and grey box not important?", "id": "5a7b898021c2de001afea11d", "answers": [], "is_impossible": true}], "context": "Grey-box testing (American spelling: gray-box testing) involves having knowledge of internal data structures and algorithms for purposes of designing tests, while executing those tests at the user, or black-box level. The tester is not required to have full access to the software's source code.[not in citation given] Manipulating input data and formatting output do not qualify as grey-box, because the input and output are clearly outside of the \"black box\" that we are calling the system under test. This distinction is particularly important when conducting integration testing between two modules of code written by two different developers, where only the interfaces are exposed for test.", "allenNER": {"words": "Grey - box testing ( American spelling : gray - box testing ) involves having knowledge of internal data structures and algorithms for purposes of designing tests , while executing those tests at the user , or black - box level . The tester is not required to have full access to the software 's source code.[not in citation given ] Manipulating input data and formatting output do not qualify as grey - box , because the input and output are clearly outside of the \" black box \" that we are calling the system under test . This distinction is particularly important when conducting integration testing between two modules of code written by two different developers , where only the interfaces are exposed for test .", "tags": "O O O O O U-MISC O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What dopes a typical grey-box tester sets up?", "id": "5729296d6aef051400154afa", "answers": [{"text": "an isolated testing environment", "answer_start": 209}], "is_impossible": false}, {"question": "What does the tester execute while performing certain actions?", "id": "5729296d6aef051400154afb", "answers": [{"text": "SQL statements", "answer_start": 397}], "is_impossible": false}, {"question": "What does a grey-box tester implement when they have limited information?", "id": "5729296d6aef051400154afc", "answers": [{"text": "intelligent test scenarios", "answer_start": 545}], "is_impossible": false}, {"plausible_answers": [{"text": "the tester makes better-informed testing choices while testing the software from outside", "answer_start": 62}], "question": "Knowing the overlying concepts of how software works helps testers how?", "id": "5a7b8a9421c2de001afea122", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "isolated", "answer_start": 212}], "question": "A black-box tester will usually be able to set up what type of testing environment?", "id": "5a7b8a9421c2de001afea123", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "SQL statements", "answer_start": 397}], "question": "What does the tester execute while preforming certain queries?", "id": "5a7b8a9421c2de001afea124", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "intelligent test scenarios", "answer_start": 545}], "question": "Based on lengthy information, what does grey-box testing implement?", "id": "5a7b8a9421c2de001afea125", "answers": [], "is_impossible": true}], "context": "By knowing the underlying concepts of how the software works, the tester makes better-informed testing choices while testing the software from outside. Typically, a grey-box tester will be permitted to set up an isolated testing environment with activities such as seeding a database. The tester can observe the state of the product being tested after performing certain actions such as executing SQL statements against the database and then executing queries to ensure that the expected changes have been reflected. Grey-box testing implements intelligent test scenarios, based on limited information. This will particularly apply to data type handling, exception handling, and so on.", "allenNER": {"words": "By knowing the underlying concepts of how the software works , the tester makes better - informed testing choices while testing the software from outside . Typically , a grey - box tester will be permitted to set up an isolated testing environment with activities such as seeding a database . The tester can observe the state of the product being tested after performing certain actions such as executing SQL statements against the database and then executing queries to ensure that the expected changes have been reflected . Grey - box testing implements intelligent test scenarios , based on limited information . This will particularly apply to data type handling , exception handling , and so on .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O U-MISC O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What are the four recognized levels of testing software?", "id": "57292a631d04691400779105", "answers": [{"text": "unit testing, integration testing, component interface testing, and system testing", "answer_start": 53}], "is_impossible": false}, {"question": "What are these test (level testing) typically grouped by?", "id": "57292a631d04691400779106", "answers": [{"text": "software development process, or by the level of specificity of the test", "answer_start": 197}], "is_impossible": false}, {"question": "What is defined in the SWEBOK guide as to testing the main levels?", "id": "57292a631d04691400779107", "answers": [{"text": "unit-, integration-, and system testing", "answer_start": 353}], "is_impossible": false}, {"question": "What are the other levels classified by?", "id": "57292a631d04691400779108", "answers": [{"text": "the testing objective", "answer_start": 514}], "is_impossible": false}, {"plausible_answers": [{"text": "unit testing, integration testing, component interface testing, and system testing", "answer_start": 53}], "question": "What are the four unrecognized levels of tests?", "id": "5a7b8bc121c2de001afea134", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "by where they are added in the software development process, or by the level of specificity of the test", "answer_start": 166}], "question": "How are test infrequently grouped?", "id": "5a7b8bc121c2de001afea135", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "SWEBOK guide", "answer_start": 336}], "question": "What defines all the levels of the development process?", "id": "5a7b8bc121c2de001afea136", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "system testing", "answer_start": 378}], "question": "The levels covered in the SWEBOK guide are unit-, reintegration, and what other level?", "id": "5a7b8bc121c2de001afea137", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "Other test levels", "answer_start": 478}], "question": "What is classified by the pretesting objective?", "id": "5a7b8bc121c2de001afea138", "answers": [], "is_impossible": true}], "context": "There are generally four recognized levels of tests: unit testing, integration testing, component interface testing, and system testing. Tests are frequently grouped by where they are added in the software development process, or by the level of specificity of the test. The main levels during the development process as defined by the SWEBOK guide are unit-, integration-, and system testing that are distinguished by the test target without implying a specific process model. Other test levels are classified by the testing objective.", "allenNER": {"words": "There are generally four recognized levels of tests : unit testing , integration testing , component interface testing , and system testing . Tests are frequently grouped by where they are added in the software development process , or by the level of specificity of the test . The main levels during the development process as defined by the SWEBOK guide are unit- , integration- , and system testing that are distinguished by the test target without implying a specific process model . Other test levels are classified by the testing objective .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O U-MISC O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What is the main reasoning behind Unit testing that involves synchronization of the application on a broad spectrum? ", "id": "57292bf71d0469140077910d", "answers": [{"text": "reduce software development risks, time, and costs", "answer_start": 164}], "is_impossible": false}, {"question": "Who performs the Unit testing phase?", "id": "57292bf71d0469140077910e", "answers": [{"text": "software developer or engineer", "answer_start": 239}], "is_impossible": false}, {"question": "What does Unit testing look to eliminate?", "id": "57292bf71d0469140077910f", "answers": [{"text": "construction errors", "answer_start": 430}], "is_impossible": false}, {"question": "By elimination construction errors, what is the expected end result?", "id": "57292bf71d04691400779110", "answers": [{"text": "increase the quality of the resulting software", "answer_start": 510}], "is_impossible": false}, {"plausible_answers": [{"text": "synchronized application of a broad spectrum of defect prevention and detection strategies in order to reduce software development risks, time, and costs.", "answer_start": 61}], "question": "Unit testing is a firmware development that involves what?", "id": "5a7b8d4d21c2de001afea158", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "software", "answer_start": 239}], "question": "Unit testing is preformed by the architect or what kind of developer?", "id": "5a7b8d4d21c2de001afea159", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "augments", "answer_start": 386}], "question": "Instead of reducing traditional QA focuses, unit testing does what to it?", "id": "5a7b8d4d21c2de001afea15a", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "code is promoted to QA", "answer_start": 457}], "question": "Unit testing tries to eliminate collaboration errors before what?", "id": "5a7b8d4d21c2de001afea15b", "answers": [], "is_impossible": true}], "context": "Unit testing is a software development process that involves synchronized application of a broad spectrum of defect prevention and detection strategies in order to reduce software development risks, time, and costs. It is performed by the software developer or engineer during the construction phase of the software development lifecycle. Rather than replace traditional QA focuses, it augments it. Unit testing aims to eliminate construction errors before code is promoted to QA; this strategy is intended to increase the quality of the resulting software as well as the efficiency of the overall development and QA process.", "allenNER": {"words": "Unit testing is a software development process that involves synchronized application of a broad spectrum of defect prevention and detection strategies in order to reduce software development risks , time , and costs . It is performed by the software developer or engineer during the construction phase of the software development lifecycle . Rather than replace traditional QA focuses , it augments it . Unit testing aims to eliminate construction errors before code is promoted to QA ; this strategy is intended to increase the quality of the resulting software as well as the efficiency of the overall development and QA process .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O U-MISC O O O O O O O O O O O O O O O O O O U-MISC O O O O O O O O O O O O O O O O O O O O O O O U-MISC O O"}}, {"qas": [{"question": "What is it called to check data passed between units?", "id": "572937f3af94a219006aa1b7", "answers": [{"text": "component interface testing", "answer_start": 16}], "is_impossible": false}, {"question": "What is it called when data is being passed?", "id": "572937f3af94a219006aa1b8", "answers": [{"text": "message packets", "answer_start": 238}], "is_impossible": false}, {"question": "What is an option  of component interface testing  used while sending message packets?", "id": "572937f3af94a219006aa1b9", "answers": [{"text": "keep a separate log file of data items being passed", "answer_start": 435}], "is_impossible": false}, {"question": "What is a variation of black-box testing?", "id": "572937f3af94a219006aa1ba", "answers": [{"text": "Component interface testing", "answer_start": 829}], "is_impossible": false}, {"plausible_answers": [{"text": "component interface testing", "answer_start": 16}], "question": "What can be used to check the databases passed between units?", "id": "5a7b8ea821c2de001afea160", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "message packets", "answer_start": 238}], "question": "What is another name for the data being possessed? ", "id": "5a7b8ea821c2de001afea161", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "separate log file of data items being passed, often with a timestamp logged to allow analysis of thousands of cases of data passed", "answer_start": 442}], "question": "What is one option for interface integration?", "id": "5a7b8ea821c2de001afea162", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "unexpected performance in the next unit", "answer_start": 788}], "question": "Usual data values in an interface can be used to explain what?", "id": "5a7b8ea821c2de001afea163", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "Component interface testing", "answer_start": 829}], "question": "What is a variation of black-boxing testing?", "id": "5a7b8ea821c2de001afea164", "answers": [], "is_impossible": true}], "context": "The practice of component interface testing can be used to check the handling of data passed between various units, or subsystem components, beyond full integration testing between those units. The data being passed can be considered as \"message packets\" and the range or data types can be checked, for data generated from one unit, and tested for validity before being passed into another unit. One option for interface testing is to keep a separate log file of data items being passed, often with a timestamp logged to allow analysis of thousands of cases of data passed between units for days or weeks. Tests can include checking the handling of some extreme data values while other interface variables are passed as normal values. Unusual data values in an interface can help explain unexpected performance in the next unit. Component interface testing is a variation of black-box testing, with the focus on the data values beyond just the related actions of a subsystem component.", "allenNER": {"words": "The practice of component interface testing can be used to check the handling of data passed between various units , or subsystem components , beyond full integration testing between those units . The data being passed can be considered as \" message packets \" and the range or data types can be checked , for data generated from one unit , and tested for validity before being passed into another unit . One option for interface testing is to keep a separate log file of data items being passed , often with a timestamp logged to allow analysis of thousands of cases of data passed between units for days or weeks . Tests can include checking the handling of some extreme data values while other interface variables are passed as normal values . Unusual data values in an interface can help explain unexpected performance in the next unit . Component interface testing is a variation of black - box testing , with the focus on the data values beyond just the related actions of a subsystem component .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What is the term used to test software during a pre-release?", "id": "572938f31d04691400779187", "answers": [{"text": "Operational Acceptance", "answer_start": 0}], "is_impossible": false}, {"question": "What does Operational Acceptance focus on?", "id": "572938f31d04691400779188", "answers": [{"text": "operational readiness of the system", "answer_start": 314}], "is_impossible": false}, {"question": "What is Operational Acceptance limited to while testing?", "id": "572938f31d04691400779189", "answers": [{"text": "limited to those tests which are required to verify the non-functional aspects of the system", "answer_start": 570}], "is_impossible": false}, {"plausible_answers": [{"text": "to conduct operational readiness (pre-release) of a product, service or system as part of a quality management system.", "answer_start": 31}], "question": "What is Occupational Acceptance used for?", "id": "5a7b906021c2de001afea16a", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "OAT", "answer_start": 150}], "question": "What is an uncommon type of functional software testing?", "id": "5a7b906021c2de001afea16b", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "limited to those tests which are required to verify the non-functional aspects of the system.", "answer_start": 570}], "question": "What is Operational Acceptance limited to while running?", "id": "5a7b906021c2de001afea16c", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "the operational readiness of the system to be supported, and/or to become part of the production environment.", "answer_start": 310}], "question": "OAT focuses the least on what?", "id": "5a7b906021c2de001afea16d", "answers": [], "is_impossible": true}], "context": "Operational Acceptance is used to conduct operational readiness (pre-release) of a product, service or system as part of a quality management system. OAT is a common type of non-functional software testing, used mainly in software development and software maintenance projects. This type of testing focuses on the operational readiness of the system to be supported, and/or to become part of the production environment. Hence, it is also known as operational readiness testing (ORT) or Operations readiness and assurance (OR&A) testing. Functional testing within OAT is limited to those tests which are required to verify the non-functional aspects of the system.", "allenNER": {"words": "Operational Acceptance is used to conduct operational readiness ( pre - release ) of a product , service or system as part of a quality management system . OAT is a common type of non - functional software testing , used mainly in software development and software maintenance projects . This type of testing focuses on the operational readiness of the system to be supported , and/or to become part of the production environment . Hence , it is also known as operational readiness testing ( ORT ) or Operations readiness and assurance ( OR&A ) testing . Functional testing within OAT is limited to those tests which are required to verify the non - functional aspects of the system .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O U-MISC O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O U-ORG O O O O O O O U-ORG O O O O O O U-ORG O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What is the most common reason for software failure?", "id": "57293bee1d046914007791a5", "answers": [{"text": "compatibility with other application software", "answer_start": 72}], "is_impossible": false}, {"question": "What do developers commonly do when creating software that can lead to failures?", "id": "57293bee1d046914007791a6", "answers": [{"text": "lack of backward compatibility", "answer_start": 430}], "is_impossible": false}, {"question": "What is the most common cause for software failure?", "id": "57293d646aef051400154bd0", "answers": [{"text": "lack of its compatibility with other application software", "answer_start": 60}], "is_impossible": false}, {"question": "What often lacks in software developed when its released that can eventually lead to errors?", "id": "57293d646aef051400154bd1", "answers": [{"text": "a lack of backward compatibility", "answer_start": 428}], "is_impossible": false}, {"question": "What does backwards compatibility always seem to be the cause of errors and bugs after a release?", "id": "57293d646aef051400154bd2", "answers": [{"text": "test software only on the latest version of the target environment", "answer_start": 513}], "is_impossible": false}, {"plausible_answers": [{"text": "software failure", "answer_start": 18}], "question": "Lack of compatibility with other application software is an uncommon cause of what?", "id": "5a7b93f321c2de001afea172", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "the target", "answer_start": 557}], "question": "Programmers develop software on the earliest version of what environment?", "id": "5a7b93f321c2de001afea173", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "compatibility with other application software", "answer_start": 72}], "question": "What is the most uncommon reason for software failure?", "id": "5a7b93f321c2de001afea174", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "original", "answer_start": 233}], "question": "Target environments rarely differ greatly from the what?", "id": "5a7b93f321c2de001afea175", "answers": [], "is_impossible": true}], "context": "A common cause of software failure (real or perceived) is a lack of its compatibility with other application software, operating systems (or operating system versions, old or new), or target environments that differ greatly from the original (such as a terminal or GUI application intended to be run on the desktop now being required to become a web application, which must render in a web browser). For example, in the case of a lack of backward compatibility, this can occur because the programmers develop and test software only on the latest version of the target environment, which not all users may be running. This results in the unintended consequence that the latest work may not function on earlier versions of the target environment, or on older hardware that earlier versions of the target environment was capable of using. Sometimes such issues can be fixed by proactively abstracting operating system functionality into a separate program module or library.", "allenNER": {"words": "A common cause of software failure ( real or perceived ) is a lack of its compatibility with other application software , operating systems ( or operating system versions , old or new ) , or target environments that differ greatly from the original ( such as a terminal or GUI application intended to be run on the desktop now being required to become a web application , which must render in a web browser ) . For example , in the case of a lack of backward compatibility , this can occur because the programmers develop and test software only on the latest version of the target environment , which not all users may be running . This results in the unintended consequence that the latest work may not function on earlier versions of the target environment , or on older hardware that earlier versions of the target environment was capable of using . Sometimes such issues can be fixed by proactively abstracting operating system functionality into a separate program module or library .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "Finding defects once a change in code had already happened is called?", "id": "572940641d046914007791f9", "answers": [{"text": "Regression testing", "answer_start": 0}], "is_impossible": false}, {"question": "What happens to software after a major change in code that leads to regression??", "id": "572940641d046914007791fa", "answers": [{"text": "stops working as intended", "answer_start": 306}], "is_impossible": false}, {"question": "What is a common method used during regression testing?", "id": "572940641d046914007791fb", "answers": [{"text": "re-running previous sets of test-cases", "answer_start": 546}], "is_impossible": false}, {"question": "What determines how deep a tester will go during regression?", "id": "572940641d046914007791fc", "answers": [{"text": "phase in the release process and the risk of the added features", "answer_start": 683}], "is_impossible": false}, {"question": "If changes need to occur during the softwares early release with regression testing how much of an impact does this have on the team as related to other testing? ", "id": "572940641d046914007791fd", "answers": [{"text": "typically the largest test effort in commercial software development", "answer_start": 995}], "is_impossible": false}, {"plausible_answers": [{"text": "Regression testing", "answer_start": 0}], "question": "What type of testing is used to find defects after minor code changes?", "id": "5a7b95b321c2de001afea17a", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "as degraded or lost features", "answer_start": 142}], "question": "How does regression testing classify recovering software regressions?", "id": "5a7b95b321c2de001afea17b", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "program changes", "answer_start": 394}], "question": "Usually regressions happen as an intended consequence of what?", "id": "5a7b95b321c2de001afea17c", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "re-running previous sets of test-cases and checking whether previously fixed faults have re-emerged", "answer_start": 546}], "question": "What are common methods of regression coding?", "id": "5a7b95b321c2de001afea17d", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "Regression testing", "answer_start": 973}], "question": "What is usually the largest test effort in personal software development?", "id": "5a7b95b321c2de001afea17e", "answers": [], "is_impossible": true}], "context": "Regression testing focuses on finding defects after a major code change has occurred. Specifically, it seeks to uncover software regressions, as degraded or lost features, including old bugs that have come back. Such regressions occur whenever software functionality that was previously working correctly, stops working as intended. Typically, regressions occur as an unintended consequence of program changes, when the newly developed part of the software collides with the previously existing code. Common methods of regression testing include re-running previous sets of test-cases and checking whether previously fixed faults have re-emerged. The depth of testing depends on the phase in the release process and the risk of the added features. They can either be complete, for changes added late in the release or deemed to be risky, or be very shallow, consisting of positive tests on each feature, if the changes are early in the release or deemed to be of low risk. Regression testing is typically the largest test effort in commercial software development, due to checking numerous details in prior software features, and even new software can be developed while using some old test-cases to test parts of the new design to ensure prior functionality is still supported.", "allenNER": {"words": "Regression testing focuses on finding defects after a major code change has occurred . Specifically , it seeks to uncover software regressions , as degraded or lost features , including old bugs that have come back . Such regressions occur whenever software functionality that was previously working correctly , stops working as intended . Typically , regressions occur as an unintended consequence of program changes , when the newly developed part of the software collides with the previously existing code . Common methods of regression testing include re - running previous sets of test - cases and checking whether previously fixed faults have re - emerged . The depth of testing depends on the phase in the release process and the risk of the added features . They can either be complete , for changes added late in the release or deemed to be risky , or be very shallow , consisting of positive tests on each feature , if the changes are early in the release or deemed to be of low risk . Regression testing is typically the largest test effort in commercial software development , due to checking numerous details in prior software features , and even new software can be developed while using some old test - cases to test parts of the new design to ensure prior functionality is still supported .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What typically comes after the Alpha stage in the development and testing of software?", "id": "5729410f6aef051400154c04", "answers": [{"text": "Beta testing", "answer_start": 0}], "is_impossible": false}, {"question": "To whom is the beta testing released to?", "id": "5729410f6aef051400154c05", "answers": [{"text": "limited audience outside of the programming", "answer_start": 173}], "is_impossible": false}, {"question": "What is it called when a public test continues indefinitely?", "id": "5729410f6aef051400154c06", "answers": [{"text": "perpetual beta", "answer_start": 564}], "is_impossible": false}, {"plausible_answers": [{"text": "Beta testing", "answer_start": 0}], "question": "What type of testing comes before alpha testing?", "id": "5a7b96bd21c2de001afea184", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "beta testers.", "answer_start": 231}], "question": "Beta versions are released to a broad audience known as what?", "id": "5a7b96bd21c2de001afea185", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "to increase the feedback field to a maximal number of future users and to deliver value earlier", "answer_start": 416}], "question": "Why are alpha version made available to the public?", "id": "5a7b96bd21c2de001afea186", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "perpetual beta", "answer_start": 564}], "question": "What is the term for the public test that continues for a definite amount of time?", "id": "5a7b96bd21c2de001afea187", "answers": [], "is_impossible": true}], "context": "Beta testing comes after alpha testing and can be considered a form of external user acceptance testing. Versions of the software, known as beta versions, are released to a limited audience outside of the programming team known as beta testers. The software is released to groups of people so that further testing can ensure the product has few faults or bugs. Beta versions can be made available to the open public to increase the feedback field to a maximal number of future users and to deliver value earlier, for an extended or even indefinite period of time (perpetual beta).[citation needed]", "allenNER": {"words": "Beta testing comes after alpha testing and can be considered a form of external user acceptance testing . Versions of the software , known as beta versions , are released to a limited audience outside of the programming team known as beta testers . The software is released to groups of people so that further testing can ensure the product has few faults or bugs . Beta versions can be made available to the open public to increase the feedback field to a maximal number of future users and to deliver value earlier , for an extended or even indefinite period of time ( perpetual beta).[citation needed ]", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O U-MISC O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What method is used to cause a system to fail?", "id": "5729429a6aef051400154c18", "answers": [{"text": "Destructive testing", "answer_start": 0}], "is_impossible": false}, {"question": "What does Destructive testing verify?", "id": "5729429a6aef051400154c19", "answers": [{"text": "software functions properly even when it receives invalid or unexpected inputs", "answer_start": 97}], "is_impossible": false}, {"question": "What is one example of failure testing?", "id": "5729429a6aef051400154c1a", "answers": [{"text": "Software fault injection", "answer_start": 281}], "is_impossible": false}, {"plausible_answers": [{"text": "attempts to cause the software or a sub-system to fail", "answer_start": 20}], "question": "Destruction testing does what?", "id": "5a7b97a121c2de001afea18c", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "software functions properly even when it receives invalid or unexpected inputs,", "answer_start": 97}], "question": "What does destruction testing verify?", "id": "5a7b97a121c2de001afea18d", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "fuzzing", "answer_start": 322}], "question": "What is an example of software fault injecture?", "id": "5a7b97a121c2de001afea18e", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "perform destructive testing.", "answer_start": 539}], "question": "There are very few open-source and free tools that do what?", "id": "5a7b97a121c2de001afea18f", "answers": [], "is_impossible": true}], "context": "Destructive testing attempts to cause the software or a sub-system to fail. It verifies that the software functions properly even when it receives invalid or unexpected inputs, thereby establishing the robustness of input validation and error-management routines.[citation needed] Software fault injection, in the form of fuzzing, is an example of failure testing. Various commercial non-functional testing tools are linked from the software fault injection page; there are also numerous open-source and free software tools available that perform destructive testing.", "allenNER": {"words": "Destructive testing attempts to cause the software or a sub - system to fail . It verifies that the software functions properly even when it receives invalid or unexpected inputs , thereby establishing the robustness of input validation and error - management routines.[citation needed ] Software fault injection , in the form of fuzzing , is an example of failure testing . Various commercial non - functional testing tools are linked from the software fault injection page ; there are also numerous open - source and free software tools available that perform destructive testing .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What method is used to test software under a specific load?", "id": "57294dae6aef051400154c7e", "answers": [{"text": "Load testing", "answer_start": 0}], "is_impossible": false}, {"question": "What two methods can be used when using Load Testing?", "id": "57294dae6aef051400154c7f", "answers": [{"text": "data or a large number of users", "answer_start": 148}], "is_impossible": false}, {"question": "What is called to test software functions when certain components increase in side?", "id": "57294dae6aef051400154c80", "answers": [{"text": "Volume testing", "answer_start": 360}], "is_impossible": false}, {"question": "What is Stable testing also called?", "id": "57294dae6aef051400154c81", "answers": [{"text": "endurance testing", "answer_start": 629}], "is_impossible": false}, {"question": "What method is used to test components under unexpected workloads?", "id": "57294dae6aef051400154c82", "answers": [{"text": "Stress testing", "answer_start": 501}], "is_impossible": false}, {"plausible_answers": [{"text": "Load testing", "answer_start": 0}], "question": "What method is used to test firmware under a specific load?", "id": "5a7b98f621c2de001afea194", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "data or a large number of users", "answer_start": 148}], "question": "What two methods cannot be used when using Load Testing?", "id": "5a7b98f621c2de001afea195", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "when certain components (for example a file or database) increase radically in size.", "answer_start": 416}], "question": "Volume Testing is a way to test firmware when?", "id": "5a7b98f621c2de001afea196", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "Stress testing", "answer_start": 501}], "question": "Testing reliability under expected or rare workload is called what?", "id": "5a7b98f621c2de001afea197", "answers": [], "is_impossible": true}], "context": "Load testing is primarily concerned with testing that the system can continue to operate under a specific load, whether that be large quantities of data or a large number of users. This is generally referred to as software scalability. The related load testing activity of when performed as a non-functional activity is often referred to as endurance testing. Volume testing is a way to test software functions even when certain components (for example a file or database) increase radically in size. Stress testing is a way to test reliability under unexpected or rare workloads. Stability testing (often referred to as load or endurance testing) checks to see if the software can continuously function well in or above an acceptable period.", "allenNER": {"words": "Load testing is primarily concerned with testing that the system can continue to operate under a specific load , whether that be large quantities of data or a large number of users . This is generally referred to as software scalability . The related load testing activity of when performed as a non - functional activity is often referred to as endurance testing . Volume testing is a way to test software functions even when certain components ( for example a file or database ) increase radically in size . Stress testing is a way to test reliability under unexpected or rare workloads . Stability testing ( often referred to as load or endurance testing ) checks to see if the software can continuously function well in or above an acceptable period .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What method is used that involves synchronization of a application?", "id": "57294ea7af94a219006aa27f", "answers": [{"text": "Development Testing", "answer_start": 0}], "is_impossible": false}, {"question": "When is development testing used?", "id": "57294ea7af94a219006aa280", "answers": [{"text": "construction phase of the software development lifecycle", "answer_start": 288}], "is_impossible": false}, {"question": "What does Development testing look to eliminate?", "id": "57294ea7af94a219006aa281", "answers": [{"text": "construction errors", "answer_start": 444}], "is_impossible": false}, {"plausible_answers": [{"text": "Development Testing", "answer_start": 0}], "question": "What method is used that involved syncopation of an application?", "id": "5a7b9a8521c2de001afea1a6", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "construction phase of the software development lifecycle", "answer_start": 288}], "question": "When is development testing not used?", "id": "5a7b9a8521c2de001afea1a7", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "QA", "answer_start": 491}], "question": "Development Testing attempts to eliminate instruction errors before code is promoted where?", "id": "5a7b9a8521c2de001afea1a8", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "software developer or engineer", "answer_start": 246}], "question": "Development Testing is designed by who?", "id": "5a7b9a8521c2de001afea1a9", "answers": [], "is_impossible": true}], "context": "Development Testing is a software development process that involves synchronized application of a broad spectrum of defect prevention and detection strategies in order to reduce software development risks, time, and costs. It is performed by the software developer or engineer during the construction phase of the software development lifecycle. Rather than replace traditional QA focuses, it augments it. Development Testing aims to eliminate construction errors before code is promoted to QA; this strategy is intended to increase the quality of the resulting software as well as the efficiency of the overall development and QA process.", "allenNER": {"words": "Development Testing is a software development process that involves synchronized application of a broad spectrum of defect prevention and detection strategies in order to reduce software development risks , time , and costs . It is performed by the software developer or engineer during the construction phase of the software development lifecycle . Rather than replace traditional QA focuses , it augments it . Development Testing aims to eliminate construction errors before code is promoted to QA ; this strategy is intended to increase the quality of the resulting software as well as the efficiency of the overall development and QA process .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O U-MISC O O O O O O B-MISC L-MISC O O O O O O O O O O U-MISC O O O O O O O O O O O O O O O O O O O O O O O U-MISC O O"}}, {"qas": [{"question": "Which two current movements adhere to the \"test-driven software development\"?", "id": "57295082af94a219006aa295", "answers": [{"text": "extreme programming and the agile software development", "answer_start": 56}], "is_impossible": false}, {"question": "Under the development of agile software and extreme programing what is written first?", "id": "57295082af94a219006aa296", "answers": [{"text": "unit tests are written first", "answer_start": 192}], "is_impossible": false}, {"question": "What is the goal of Unit testing?", "id": "57295082af94a219006aa297", "answers": [{"text": "achieve continuous integration where software updates can be published to the public frequently", "answer_start": 902}], "is_impossible": false}, {"plausible_answers": [{"text": "extreme programming and the agile software development", "answer_start": 56}], "question": "Which two old movements adhere to the \"test-driven software development?\"", "id": "5a7b9b6521c2de001afea1ae", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "unit tests are written first", "answer_start": 192}], "question": "Under the development of fragile software and extreme programming what is written first?", "id": "5a7b9b6521c2de001afea1af", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "published to the public frequently", "answer_start": 963}], "question": "The goal of unit testing is to achieve discontinuous integration where software updates can be what?", "id": "5a7b9b6521c2de001afea1b0", "answers": [], "is_impossible": true}], "context": "In contrast, some emerging software disciplines such as extreme programming and the agile software development movement, adhere to a \"test-driven software development\" model. In this process, unit tests are written first, by the software engineers (often with pair programming in the extreme programming methodology). Of course these tests fail initially; as they are expected to. Then as code is written it passes incrementally larger portions of the test suites. The test suites are continuously updated as new failure conditions and corner cases are discovered, and they are integrated with any regression tests that are developed. Unit tests are maintained along with the rest of the software source code and generally integrated into the build process (with inherently interactive tests being relegated to a partially manual build acceptance process). The ultimate goal of this test process is to achieve continuous integration where software updates can be published to the public frequently.  ", "allenNER": {"words": "In contrast , some emerging software disciplines such as extreme programming and the agile software development movement , adhere to a \" test - driven software development \" model . In this process , unit tests are written first , by the software engineers ( often with pair programming in the extreme programming methodology ) . Of course these tests fail initially ; as they are expected to . Then as code is written it passes incrementally larger portions of the test suites . The test suites are continuously updated as new failure conditions and corner cases are discovered , and they are integrated with any regression tests that are developed . Unit tests are maintained along with the rest of the software source code and generally integrated into the build process ( with inherently interactive tests being relegated to a partially manual build acceptance process ) . The ultimate goal of this test process is to achieve continuous integration where software updates can be published to the public frequently .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What three components make up Bottom Up Testing?", "id": "5729525c6aef051400154cdc", "answers": [{"text": "modules, procedures, and functions", "answer_start": 90}], "is_impossible": false}, {"question": "Bottom Up Testing helps facilitate the testing of what?", "id": "5729525c6aef051400154cdd", "answers": [{"text": "the testing of higher level components", "answer_start": 183}], "is_impossible": false}, {"question": "What does Bottom Up Testing also help with once the process has been repeated over and over again at all levels?", "id": "5729525c6aef051400154cde", "answers": [{"text": "makes it easier to report testing progress in the form of a percentage", "answer_start": 648}], "is_impossible": false}, {"plausible_answers": [{"text": "Bottom Up Testing", "answer_start": 0}], "question": "When the highest level components are tested first, the testing process is called what?", "id": "5a7b9cdb21c2de001afea1be", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "modules, procedures, and functions", "answer_start": 90}], "question": "What three components make up Bottom Down Testing?", "id": "5a7b9cdb21c2de001afea1bf", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "development level", "answer_start": 529}], "question": "This approach only works when half of the modules of the same what are ready?", "id": "5a7b9cdb21c2de001afea1c0", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "report testing progress in the form of a percentage", "answer_start": 667}], "question": "Bottom Up Testing helps determine levels of software developed and makes it harder to complete what?", "id": "5a7b9cdb21c2de001afea1c1", "answers": [], "is_impossible": true}], "context": "Bottom Up Testing is an approach to integrated testing where the lowest level components (modules, procedures, and functions) are tested first, then integrated and used to facilitate the testing of higher level components. After the integration testing of lower level integrated modules, the next level of modules will be formed and can be used for integration testing. The process is repeated until the components at the top of the hierarchy are tested. This approach is helpful only when all or most of the modules of the same development level are ready.[citation needed] This method also helps to determine the levels of software developed and makes it easier to report testing progress in the form of a percentage.[citation needed]", "allenNER": {"words": "Bottom Up Testing is an approach to integrated testing where the lowest level components ( modules , procedures , and functions ) are tested first , then integrated and used to facilitate the testing of higher level components . After the integration testing of lower level integrated modules , the next level of modules will be formed and can be used for integration testing . The process is repeated until the components at the top of the hierarchy are tested . This approach is helpful only when all or most of the modules of the same development level are ready.[citation needed ] This method also helps to determine the levels of software developed and makes it easier to report testing progress in the form of a percentage.[citation needed ]", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "If the number of states is unknown, what group does this fall into?", "id": "572954a83f37b31900478261", "answers": [{"text": "Class II", "answer_start": 437}], "is_impossible": false}, {"question": "There are three classes, what has been concluded and proven for all classes?", "id": "572954a83f37b31900478262", "answers": [{"text": "each class is strictly included into the next", "answer_start": 24}], "is_impossible": false}, {"question": "If the number of states are unknown and the finite state of the machine is failing for a single trace, which group does this fall into?", "id": "572954a83f37b31900478263", "answers": [{"text": "Class III", "answer_start": 672}], "is_impossible": false}, {"plausible_answers": [{"text": "the next", "answer_start": 61}], "question": "It has been disproved that each class is included into what?", "id": "5a7b9e5821c2de001afea1ce", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "Class I", "answer_start": 311}], "question": "If there are infinite sets of inputs and outputs, the states belong to what class?", "id": "5a7b9e5821c2de001afea1cf", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "the simplicity of the assumed computation model,", "answer_start": 1006}], "question": "The inclusion into Class I requires what?", "id": "5a7b9e5821c2de001afea1d0", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "testing framework", "answer_start": 1295}], "question": "Matthew Hennessy wrote what?", "id": "5a7b9e5821c2de001afea1d1", "answers": [], "is_impossible": true}], "context": "It has been proved that each class is strictly included into the next. For instance, testing when we assume that the behavior of the implementation under test can be denoted by a deterministic finite-state machine for some known finite sets of inputs and outputs and with some known number of states belongs to Class I (and all subsequent classes). However, if the number of states is not known, then it only belongs to all classes from Class II on. If the implementation under test must be a deterministic finite-state machine failing the specification for a single trace (and its continuations), and its number of states is unknown, then it only belongs to classes from Class III on. Testing temporal machines where transitions are triggered if inputs are produced within some real-bounded interval only belongs to classes from Class IV on, whereas testing many non-deterministic systems only belongs to Class V (but not all, and some even belong to Class I). The inclusion into Class I does not require the simplicity of the assumed computation model, as some testing cases involving implementations written in any programming language, and testing implementations defined as machines depending on continuous magnitudes, have been proved to be in Class I. Other elaborated cases, such as the testing framework by Matthew Hennessy under must semantics, and temporal machines with rational timeouts, belong to Class II.", "allenNER": {"words": "It has been proved that each class is strictly included into the next . For instance , testing when we assume that the behavior of the implementation under test can be denoted by a deterministic finite - state machine for some known finite sets of inputs and outputs and with some known number of states belongs to Class I ( and all subsequent classes ) . However , if the number of states is not known , then it only belongs to all classes from Class II on . If the implementation under test must be a deterministic finite - state machine failing the specification for a single trace ( and its continuations ) , and its number of states is unknown , then it only belongs to classes from Class III on . Testing temporal machines where transitions are triggered if inputs are produced within some real - bounded interval only belongs to classes from Class IV on , whereas testing many non - deterministic systems only belongs to Class V ( but not all , and some even belong to Class I ) . The inclusion into Class I does not require the simplicity of the assumed computation model , as some testing cases involving implementations written in any programming language , and testing implementations defined as machines depending on continuous magnitudes , have been proved to be in Class I. Other elaborated cases , such as the testing framework by Matthew Hennessy under must semantics , and temporal machines with rational timeouts , belong to Class II .", "tags}}, {"qas": [{"question": "With several certifications out there that can be aquired, what is the one trait they all share?", "id": "572955e1af94a219006aa2cd", "answers": [{"text": "requires the applicant to show their ability to test software", "answer_start": 170}], "is_impossible": false}, {"question": "What has the inability for the applicant to show how well they test led to?", "id": "572955e1af94a219006aa2ce", "answers": [{"text": "testing field is not ready for certification", "answer_start": 337}], "is_impossible": false}, {"question": "What four traits can a certification not measure?", "id": "572955e1af94a219006aa2cf", "answers": [{"text": "individual's productivity, their skill, or practical knowledge", "answer_start": 422}], "is_impossible": false}, {"plausible_answers": [{"text": "certification programs", "answer_start": 8}], "question": "What programs are available to support non-professional aspirations of software testers?", "id": "5a7b9f0621c2de001afea1e0", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "No certification", "answer_start": 132}], "question": "What certification requires applicants to demonstrate ability?", "id": "5a7b9f0621c2de001afea1e1", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "certification", "answer_start": 368}], "question": "Some say the testing field is ready for what?", "id": "5a7b9f0621c2de001afea1e2", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "productivity, their skill, or practical knowledge,", "answer_start": 435}], "question": "Certification is a measure of what?", "id": "5a7b9f0621c2de001afea1e3", "answers": [], "is_impossible": true}], "context": "Several certification programs exist to support the professional aspirations of software testers and quality assurance specialists. No certification now offered actually requires the applicant to show their ability to test software. No certification is based on a widely accepted body of knowledge. This has led some to declare that the testing field is not ready for certification. Certification itself cannot measure an individual's productivity, their skill, or practical knowledge, and cannot guarantee their competence, or professionalism as a tester.", "allenNER": {"words": "Several certification programs exist to support the professional aspirations of software testers and quality assurance specialists . No certification now offered actually requires the applicant to show their ability to test software . No certification is based on a widely accepted body of knowledge . This has led some to declare that the testing field is not ready for certification . Certification itself can not measure an individual 's productivity , their skill , or practical knowledge , and can not guarantee their competence , or professionalism as a tester .", "tags": "O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O U-MISC O O O O O O O O O O O O O O O O O O O O O O O O O O O O O"}}, {"qas": [{"question": "What makes up part of the SQA?", "id": "572958236aef051400154d24", "answers": [{"text": "Software testing", "answer_start": 0}], "is_impossible": false}, {"question": "What is the primary concern for the software specialist and auditors?", "id": "572958236aef051400154d25", "answers": [{"text": "software development process", "answer_start": 152}], "is_impossible": false}, {"question": "What type of software would have a better defect tolerance?", "id": "572958236aef051400154d26", "answers": [{"text": "video game", "answer_start": 519}], "is_impossible": false}], "context": "Software testing is a part of the software quality assurance (SQA) process.:347 In SQA, software process specialists and auditors are concerned for the software development process rather than just the artifacts such as documentation, code and systems. They examine and change the software engineering process itself to reduce the number of faults that end up in the delivered software: the so-called \"defect rate\". What constitutes an \"acceptable defect rate\" depends on the nature of the software; A flight simulator video game would have much higher defect tolerance than software for an actual airplane. Although there are close links with SQA, testing departments often exist independently, and there may be no SQA function in some companies.[citation needed]", "allenNER": {"words": "Software testing is a part of the software quality assurance ( SQA ) process.:347 In SQA , software process specialists and auditors are concerned for the software development process rather than just the artifacts such as documentation , code and systems . They examine and change the software engineering process itself to reduce the number of faults that end up in the delivered software : the so - called \" defect rate \" . What constitutes an \" acceptable defect rate \" depends on the nature of the software ; A flight simulator video game would have much higher defect tolerance than software for an actual airplane . Although there are close links with SQA , testing departments often exist independently , and there may be no SQA function in some companies.[citation needed ]", "tags": "O O O O O O O O O O O U-ORG O O O U-ORG O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O U-ORG O O O O O O O O O O O O U-ORG O O O O O O"}}]}, "version": ["v2.0"]}